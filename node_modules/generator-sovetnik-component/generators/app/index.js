const Generator = require('yeoman-generator');

const camelToHyphens = require('./../../utils/camel-to-hyphens.js');
const checkCamelCase = require('./../../utils/check-camel-case.js');

module.exports = class extends Generator {
    constructor(args, opts) {
        super(args, opts);

        this._stylesPath = this.destinationPath('styles/desktop/css-new');
        this._componentsPath = this.destinationPath('components/desktop/new');
        this._templatesPath = this.sourceRoot();
    }

    start() {
        this.log('Let\'s ROCK! \u{1F918}');

        const validateComponentName = this._validateComponentName.bind(this);
        const validateComponentDescription = this._validateComponentDescription.bind(this);

        this.prompt([
            {
                'type': 'input',
                'name': 'name',
                'message': 'Enter your new component\'s name',
                'validate': validateComponentName,
                'default': 'NewComponent'
            },
            {
                'type': 'input',
                'name': 'description',
                'message': 'Enter description',
                'validate': validateComponentDescription,
                'default': 'Компонент подуктовой штуки'
            }
        ]).then((answers) => {
            this.name = answers.name;
            this.description = answers.description;

            this._addComponentScaffold();
        });
    }

    _validateComponentDescription(desc) {
        if (desc.length === 0) {
            return 'Description is required';
        }

        return true;
    }

    _validateComponentName(name) {
        if (!checkCamelCase(name)) {
            return 'Component\'s name must be CamelCased';
        }

        const fsName = camelToHyphens(name);
        const allreadyExist = this.fs.exists(`${this._componentsPath}/${fsName}/${fsName}.js`);

        if (allreadyExist) {
            return `${name}(${this._componentsPath}/${fsName}) allready exists`;
        }

        return true;
    }

    _addComponentScaffold() {
        const componentHtmlName = camelToHyphens(this.name);
        const componentCssName = camelToHyphens(this.name);
        const componentFsName = camelToHyphens(this.name);
        const componentJsName = this.name;

        this.fs.copyTpl(
            `${this._templatesPath}/component.js`,
            `${this._componentsPath}/${componentFsName}/${componentFsName}.js`,
            {
                className: componentJsName,
                fsName: componentFsName,
                description: this.description
            }
        );

        this.fs.copyTpl(
            `${this._templatesPath}/component.mustache`,
            `${this._componentsPath}/${componentFsName}/${componentFsName}.mustache`,
            {
                htmlName: componentHtmlName
            }
        );

        this.fs.copyTpl(
            `${this._templatesPath}/style.js`,
            `${this._componentsPath}/${componentFsName}/style.js`,
            {
                cssName: componentCssName
            }
        );

        this.fs.copyTpl(
            `${this._templatesPath}/data.js`,
            `${this._componentsPath}/${componentFsName}/data/full.js`,
            {
                description: this.description
            }
        );

        this.fs.copyTpl(
            `${this._templatesPath}/component.css`,
            `${this._stylesPath}/${componentFsName}.css`,
            {
                cssName: componentCssName
            }
        );
    }
};
